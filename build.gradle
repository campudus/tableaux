#!groovy
import java.nio.file.Paths
import java.text.SimpleDateFormat

plugins {
  id 'java'
  id 'scala'
  id 'application'

  id "com.github.ben-manes.versions" version '0.20.0'

  id 'org.scoverage' version '3.0.0'
  id 'com.github.kt3k.coveralls' version '2.8.2'

  id 'com.github.johnrengelman.shadow' version '4.0.4'
  id 'org.ajoberstar.grgit' version '3.0.0'

  id 'com.diffplug.gradle.spotless' version '3.18.0'
}

project.group = 'com.campudus'
project.version = '0.1.0'

def vertxVersion = '3.6.3'
def scalaVersion = '2.12.8'
def circeVersion = '0.11.1'

sourceCompatibility = '1.8'

repositories {
  jcenter()
}

configurations {
  compileOnly
}

dependencies {
  compile "org.scala-lang:scala-library:${scalaVersion}"

  // add scala-reflect to keep dependencies up-to-date
  compile "org.scala-lang:scala-reflect:${scalaVersion}"

  compile "io.vertx:vertx-core:${vertxVersion}"
  compile "io.vertx:vertx-web:${vertxVersion}"
  compile "io.vertx:vertx-mysql-postgresql-client:${vertxVersion}"

  // add Vert.x Scala
  compile "io.vertx:vertx-lang-scala_2.12:${vertxVersion}"
  compile "io.vertx:vertx-web-scala_2.12:${vertxVersion}"
  compile "io.vertx:vertx-mysql-postgresql-client-scala_2.12:${vertxVersion}"

  compile 'joda-time:joda-time:2.10.1'
  compile 'com.typesafe.scala-logging:scala-logging_2.12:3.9.2'
  compile 'org.slf4j:slf4j-jdk14:1.7.25'

  compile 'com.jcabi:jcabi-manifests:1.1'

  compile 'com.github.cb372:scalacache-guava_2.12:0.10.0'

  compile 'org.webjars:swagger-ui:3.17.6'

  compile "io.circe:circe-core_2.12:${circeVersion}"
  compile "io.circe:circe-parser_2.12:${circeVersion}"
  compile "io.circe:circe-generic_2.12:${circeVersion}"
  compile "io.circe:circe-literal_2.12:${circeVersion}"
  compile "io.circe:circe-generic-extras_2.12:${circeVersion}"
  compile "io.circe:circe-shapes_2.12:${circeVersion}"
  compile "io.circe:circe-testing_2.12:${circeVersion}"

  compileOnly "io.vertx:vertx-codegen:${vertxVersion}"

  testCompile "io.vertx:vertx-unit:${vertxVersion}"
  testCompile 'junit:junit:4.12'
  testCompile "org.scalatest:scalatest_2.12:3.0.5"
  testCompile 'org.skyscreamer:jsonassert:1.5.0'
}

mainClassName = "io.vertx.core.Launcher"
def mainVerticle = "scala:com.campudus.tableaux.Starter"

test {
  maxHeapSize = "512m"
  // http://www.oracle.com/technetwork/java/javase/relnotes-139183.html#vm
  // https://stackoverflow.com/a/4659279/104779
  jvmArgs = ["-Xmx512m", "-XX:-OmitStackTraceInFastThrow"]
}

run {
  def configFile = "conf.json"

  if (project.hasProperty("conf")) {
    configFile = conf
  } else {
    println("Using default config file 'conf.json'")
  }

  args = [
      "run",
      mainVerticle,
      "-conf", configFile
  ]

  environment ENV: "development"
}

task runRedeploy(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath

  main = mainClassName

  args = [
      "run",
      mainVerticle,
      "-conf", "conf.json",
      "--redeploy=src/main/**/*.scala,src/main/resources/**/*.*",
      "--launcher-class=${mainClassName}",
      "--on-redeploy=./gradlew classes"
  ]

  environment ENV: "development"
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.additionalParameters = ["-feature"]
}

sourceSets {
  main {
    compileClasspath += configurations.compileOnly

    // let Scala compiler do everything â€“ even java stuff
    scala {
      srcDirs += "src/main/scala"
      srcDirs += "src/main/java"
    }
    java {
      srcDirs = []
    }
  }
  test {
    compileClasspath += configurations.compileOnly
  }
}

/**
 * Code coverage
 */

scoverage {
  minimumRate = 0.85
  excludedPackages = [
      'io.vertx.scala.*',
      'org.vertx.scala.*',
      'com.github.mauricio.async.db.*'
  ]
}

coveralls {
  service = "travis-ci"

  def coverageReportPath = "${buildDir}/reports/scoverage/cobertura.xml".toString()

  def sourceDirsList = new ArrayList<String>()
  subprojects.sourceSets.main.allSource.srcDirs.each {
    it.each {
      def basePath = Paths.get(System.getProperty("user.dir"))
      def relPath = basePath.relativize(Paths.get(it.toString()))
      sourceDirsList.add(relPath.toString())
    }
  }

  sourceDirs = sourceDirsList

  coberturaReportPath = coverageReportPath
}

/**
 * Jar stuff
 */
def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX") // you can change it

def gitBranch = grgit.branch.current().fullName
def gitCommit = grgit.log(maxCommits: 1).get(0).id
def gitComitterDate = df.format(grgit.log(maxCommits: 1).get(0).date)

def buildTime = df.format(new Date())
def buildJavaVersion = JavaVersion.current().toString()

jar {
  manifest {
    attributes 'Main-Class': mainClassName
    attributes 'Main-Verticle': mainVerticle
    attributes 'Implementation-Vendor': project.group
    attributes 'Implementation-Title': project.name
    attributes 'Implementation-Version': project.version
    attributes 'Git-Branch': gitBranch
    attributes 'Git-Commit': gitCommit
    attributes 'Git-Committer-Date': gitComitterDate
    attributes 'Build-Date': buildTime
    attributes 'Build-Java-Version': buildJavaVersion
  }
}

shadowJar {
  archiveClassifier = 'fat'

  manifest {
    inheritFrom project.tasks.jar.manifest
  }

  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

assemble.dependsOn shadowJar

/**
 * scalafmt
 */
spotless {
  scala {
    scalafmt('1.5.1').configFile('.scalafmt.conf')
  }
}

/**
 * Gradle wrapper
 */
wrapper {
  gradleVersion = '5.2.1'
  distributionType = Wrapper.DistributionType.BIN
}
