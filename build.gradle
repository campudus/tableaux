#!groovy
import java.nio.file.Paths
import java.text.SimpleDateFormat

plugins {
  id 'java'
  id 'scala'
  id 'application'

  id "com.github.ben-manes.versions" version '0.48.0'
  id 'org.scoverage' version '8.0.3'
  id 'com.github.kt3k.coveralls' version '2.12.2'
  id 'com.github.johnrengelman.shadow' version '7.1.2'
  id 'com.diffplug.spotless' version '6.22.0'
  id 'com.adarshr.test-logger' version '3.2.0'
}

project.group = 'com.campudus'
project.version = '0.1.0'

def vertxVersion = '3.8.0'
def scalaVersion = '2.12.8'

sourceCompatibility = '11'

def requiredJavaVersion = JavaVersion.VERSION_11
// ensure that the build fails if sdk version doesn't match the required version
if(JavaVersion.current() < requiredJavaVersion) {
  throw new GradleException("This project requires minimum Java Version ${requiredJavaVersion}, but it's running on " + JavaVersion.current())
}

repositories {
  mavenCentral()
}

dependencies {
  implementation "org.scala-lang:scala-library:${scalaVersion}"

  // add scala-reflect to keep dependencies up-to-date
  implementation "org.scala-lang:scala-reflect:${scalaVersion}"

  implementation "io.vertx:vertx-core:${vertxVersion}"
  implementation "io.vertx:vertx-web:${vertxVersion}"
  implementation "io.vertx:vertx-mysql-postgresql-client:${vertxVersion}"
  implementation "io.vertx:vertx-auth-oauth2:${vertxVersion}"
  implementation "com.github.erosb:everit-json-schema:1.14.0"

  // add Vert.x Scala
  implementation "io.vertx:vertx-lang-scala_2.12:${vertxVersion}"
  implementation "io.vertx:vertx-web-scala_2.12:${vertxVersion}"
  implementation "io.vertx:vertx-mysql-postgresql-client-scala_2.12:${vertxVersion}"
  implementation "io.vertx:vertx-auth-oauth2-scala_2.12:${vertxVersion}"

  implementation 'joda-time:joda-time:2.10.3'
  implementation 'com.typesafe.scala-logging:scala-logging_2.12:3.9.4'
  implementation 'org.slf4j:slf4j-jdk14:1.7.28'
  implementation 'com.jcabi:jcabi-manifests:1.1'
  implementation 'com.github.cb372:scalacache-guava_2.12:0.28.0'
  implementation 'org.webjars:swagger-ui:5.9.0' // Also update version in DocumentationRouter

  compileOnly "io.vertx:vertx-codegen:${vertxVersion}"

  testImplementation "io.vertx:vertx-unit:${vertxVersion}"
  testImplementation 'junit:junit:4.12'
  testImplementation "org.scalatest:scalatest_2.12:3.0.8"
  testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

mainClassName = "io.vertx.core.Launcher"
def mainVerticle = "scala:com.campudus.tableaux.Starter"

test {
  maxHeapSize = "512m"
  // http://www.oracle.com/technetwork/java/javase/relnotes-139183.html#vm
  // https://stackoverflow.com/a/4659279/104779
  jvmArgs = ["-Xmx512m", "-XX:-OmitStackTraceInFastThrow"]
}

run {
  def configFile = "conf.json"

  if (project.hasProperty("conf")) {
    configFile = conf
  } else {
    println("Using default config file 'conf.json'")
  }

  args = [
    "run",
    mainVerticle,
    "-conf", configFile
  ]

  environment ENV: "development"
}

task runRedeploy(type: JavaExec) {
  classpath = sourceSets.main.runtimeClasspath
  mainClass = mainClassName
  def configFile = "conf.json"

  if (project.hasProperty("conf")) {
    configFile = conf
  } else {
    println("Using default config file 'conf.json'")
  }

  args = [
    "run",
    mainVerticle,
    "-conf", configFile,
    "--redeploy=src/main/**/*.scala,src/main/resources/**/*.*",
    "--launcher-class=${mainClassName}",
    "--on-redeploy=./gradlew classes"
  ]

  environment ENV: "development"
}

tasks.withType(ScalaCompile) {
  scalaCompileOptions.additionalParameters = ["-feature"]
}

sourceSets {
  main {
    // let Scala compiler do everything - even java stuff
    scala {
      srcDirs += "src/main/scala"
      srcDirs += "src/main/java"
    }
    java {
      srcDirs = []
    }
  }
}

/**
 * Code coverage
 */

scoverage {
  minimumRate = 0.85
  excludedPackages = [
    'io.vertx.scala.*',
    'org.vertx.scala.*',
    'com.github.mauricio.async.db.*'
  ]
}

/**
 * Jar stuff
 */
def df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssX")

// pass these values via env variables to the build
def gitBranch = System.getenv("GIT_BRANCH") ?: "unknown"
def gitCommit = System.getenv("GIT_COMMIT") ?: "unknown"
def gitComitterDate = System.getenv("GIT_COMMITTER_DATE") ?: "unknown"

def buildTime = df.format(new Date())
def buildJavaVersion = JavaVersion.current().toString()

jar {
  manifest {
    attributes 'Main-Class': mainClassName
    attributes 'Main-Verticle': mainVerticle
    attributes 'Implementation-Vendor': project.group
    attributes 'Implementation-Title': project.name
    attributes 'Implementation-Version': project.version
    attributes 'Git-Branch': gitBranch
    attributes 'Git-Commit': gitCommit
    attributes 'Git-Committer-Date': gitComitterDate
    attributes 'Build-Date': buildTime
    attributes 'Build-Java-Version': buildJavaVersion
  }
}

shadowJar {
  archiveClassifier = 'fat'

  manifest {
    inheritFrom project.tasks.jar.manifest
  }

  mergeServiceFiles {
    include 'META-INF/services/io.vertx.core.spi.VerticleFactory'
  }
}

assemble.dependsOn shadowJar

/**
 * scalafmt
 */
spotless {
  scala {
    scalafmt("3.4.0").configFile('.scalafmt.conf')
  }
}

testlogger {
  theme 'mocha'
  showExceptions true
  showStackTraces true
  showFullStackTraces false
  showCauses true
  slowThreshold 2000
  showSummary true
  showSimpleNames false
  showPassed true
  showSkipped true
  showFailed true
  showOnlySlow false
  showStandardStreams false
  showPassedStandardStreams true
  showSkippedStandardStreams true
  showFailedStandardStreams true
  logLevel 'lifecycle'
}

/**
 * Gradle wrapper
 */
wrapper {
  gradleVersion = '7.4.1'
  distributionType = Wrapper.DistributionType.BIN
}
