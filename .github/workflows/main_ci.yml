# https://docs.github.com/en/actions

# The workflow is used for code quality and integrity checks for pull requests
# Pushes on master are currently built and deployed with Jenkins
name: CI

on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

env:
  CI: true
  POSTGRES_DB: testing
  POSTGRES_USER: testing
  POSTGRES_PASSWORD: testing
  POSTGRES_HOST: 127.0.0.1
  POSTGRES_PORT: 5432

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        postgres-version: [13, 14, 15, 16]
      max-parallel: 4
      fail-fast: false

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_HOST_AUTH_METHOD: trust
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
          cache: 'gradle'

      - name: Setup Test ENV
        run: mv conf-github-ci.json conf-test.json

      - name: Cleanup
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean

      - name: Spotless Check
        uses: gradle/gradle-build-action@v2
        with:
          arguments: spotlessCheck scoverageClasses

      - name: Test
        uses: gradle/gradle-build-action@v2
        with:
          arguments: testClasses assemble reportScoverage

      - name: Archive test report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-report-postgres-${{ matrix.postgres-version }}
          path: build/reports/tests/test

      - name: Archive test results (xml)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-postgres-${{ matrix.postgres-version }}
          path: build/test-results/test/TEST-*.xml

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-postgres-${{ matrix.postgres-version }}
          path: build/reports/scoverage

      - name: Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: Unit/Integration Tests
          path: build/test-results/test/TEST-*.xml
          reporter: java-junit
          list-suites: "all"
          list-tests: "all"
          fail-on-error: "true"
          max-annotations: "10"

      - name: Coverage Report
        uses: 5monkeys/cobertura-action@master
        with:
          path: build/reports/scoverage/cobertura.xml
          minimum_coverage: 80

  publish-test-results:
    name: "Publish Unit Tests Results"
    needs: build-and-test
    runs-on: ubuntu-latest
    if: always()

    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          # we have to publish only one of the results of the matrix build (take postgres 16 result)
          pattern: test-results-postgres-16
          path: artifacts

      - name: Publish Unit Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: artifacts/test-results-postgres-16/**/*.xml
