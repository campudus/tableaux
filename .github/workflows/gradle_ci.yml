# https://docs.github.com/en/actions

# The workflow is used for code quality and integrity checks for pull requests
# Pushes on master are currently built and deployed with Jenkins
name: PR Integration Check Test

on:
  pull_request:
    branches: [master]

env:
  CI: true
  POSTGRES_DB: testing
  POSTGRES_USER: testing
  POSTGRES_PASSWORD: testing
  POSTGRES_HOST: 127.0.0.1
  POSTGRES_PORT: 5432

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        postgres-version: [9.6, 10, 11, 12]
      max-parallel: 4

    services:
      postgres:
        image: postgres:${{ matrix.postgres-version }}
        ports:
          - 5432:5432
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        # Set health checks to wait until postgres has started
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v2

      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: "1.8"

      - name: Setup Test ENV
        run: mv conf-github-ci.json conf-test.json

      # test queries database with postgres client
      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install --yes postgresql-client
      - name: Query database
        run: psql -h ${{ env.POSTGRES_HOST }} -d ${{ env.POSTGRES_DB }} -U ${{ env.POSTGRES_USER }} -c 'SELECT VERSION();'
        env:
          PGPASSWORD: ${{ env.POSTGRES_PASSWORD }}

      - name: Cleanup
        uses: gradle/gradle-build-action@v2
        with:
          arguments: clean

      - name: Spotless Check
        uses: gradle/gradle-build-action@v2
        with:
          arguments: spotlessCheck scoverageClasses

      - name: Test
        uses: gradle/gradle-build-action@v2
        with:
          arguments: testClasses assemble test --info

      - name: Archive test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: test-report
          path: build/reports/tests/test

      - name: Archive code coverage results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: code-coverage-report
          path: output/test/code-coverage.html
