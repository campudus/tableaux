{
  "swagger": "2.0",
  "info": {
    "title": "GRUD API",
    "description": "a restful service for storing data in tables",
    "contact": {
      "name": "Campudus GmbH",
      "url": "http://campudus.com/",
      "email": "info@campudus.com"
    },
    "version": "1.0.0"
  },
  "schemes": [
    "$SCHEME$"
  ],
  "host": "$HOST$",
  "basePath": "$BASEPATH$",
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "externalDocs": {
    "description": "GitHub project",
    "url": "https://github.com/campudus/tableaux"
  },
  "tags": [
    {
      "name": "content"
    },
    {
      "name": "media"
    },
    {
      "name": "structure"
    },
    {
      "name": "system"
    }
  ],
  "paths": {
    "/files": {
      "post": {
        "summary": "Create file handle",
        "description": "Creates a new temporary file handle.",
        "tags": [
          "media"
        ],
        "operationId": "create-file-handle",
        "parameters": [
          {
            "name": "file",
            "description": "file to add to the system",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "folder",
                "description",
                "title"
              ],
              "properties": {
                "folder": {
                  "type": "integer",
                  "format": "int32",
                  "description": "parent folder id, if null parent folder is root folder"
                },
                "description": {
                  "type": "object",
                  "example": {
                    "de-DE": "deutscher Beschreibung",
                    "en-US": "english description"
                  }
                },
                "title": {
                  "type": "object",
                  "example": {
                    "de-DE": "deutscher Titel",
                    "en-US": "english title"
                  }
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new file handle",
            "schema": {
              "type": "object",
              "properties": {
                "internalName": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "createdAt": {
                  "type": "string",
                  "example": "2015-11-24T14:13:32.936+01:00"
                },
                "folder": {
                  "type": "integer",
                  "format": "int32",
                  "description": "parent folder id"
                },
                "tmp": {
                  "type": "boolean",
                  "example": true
                },
                "externalName": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "description": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "mimeType": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "title": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "uuid": {
                  "type": "string",
                  "example": "87326b49-ebef-432e-8d4f-7fc734a4b163"
                },
                "url": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "status": {
                  "type": "string",
                  "example": "ok"
                },
                "updatedAt": {
                  "type": "string",
                  "example": "2015-11-24T14:13:32.936+01:00"
                }
              },
              "required": [
                "createdAt",
                "description",
                "externalName",
                "internalName",
                "mimeType",
                "status",
                "title",
                "tmp",
                "url",
                "uuid"
              ]
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      }
    },
    "/files/{fileuuid}": {
      "parameters": [
        {
          "$ref": "#/parameters/fileuuid"
        }
      ],
      "get": {
        "summary": "Get file meta-information",
        "description": "Returns meta-information about a file.",
        "tags": [
          "media"
        ],
        "operationId": "get-file-meta-information",
        "responses": {
          "200": {
            "description": "The files meta information",
            "schema": {
              "$ref": "#/definitions/Response: File"
            }
          }
        }
      },
      "put": {
        "summary": "Change file meta-information",
        "description": "Changes meta information of file.",
        "tags": [
          "media"
        ],
        "operationId": "change-file-meta-information",
        "parameters": [
          {
            "name": "folder",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "title": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "description": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "externalName": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "internalName": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "mimeType": {
                  "$ref": "#/definitions/Multi-language object"
                },
                "folder": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      },
      "delete": {
        "summary": "Delete file",
        "description": "",
        "tags": [
          "media"
        ],
        "operationId": "delete-file",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      }
    },
    "/files/{fileuuid}/{langtag}": {
      "parameters": [
        {
          "$ref": "#/parameters/fileuuid"
        },
        {
          "name": "langtag",
          "in": "path",
          "required": true,
          "type": "string"
        }
      ],
      "put": {
        "summary": "Upload file",
        "description": "Uploads/replaces a language specific file for this file handle.",
        "tags": [
          "media"
        ],
        "operationId": "upload-file",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      },
      "delete": {
        "summary": "Delete file (language specific)",
        "description": "",
        "tags": [
          "media"
        ],
        "operationId": "delete-file-language-specific",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      }
    },
    "/folders": {
      "get": {
        "summary": "Get root folder",
        "description": "Returns the root folder. Has no ID because it can't be changed or deleted.",
        "tags": [
          "media"
        ],
        "operationId": "get-root-folder",
        "parameters": [
          {
            "name": "langtag",
            "in": "query",
            "description": "The langtag which specifies which language name filed should be used for sorting the files",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "All folders",
            "schema": {
              "$ref": "#/definitions/Response: Folder"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      },
      "post": {
        "summary": "Create folder",
        "description": "Creates a new folder.",
        "tags": [
          "media"
        ],
        "operationId": "create-folder",
        "parameters": [
          {
            "name": "folder",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request:Folder"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      }
    },
    "/folders/{folderId}": {
      "parameters": [
        {
          "$ref": "#/parameters/folderId"
        }
      ],
      "get": {
        "summary": "Get folder",
        "description": "Returns a specific folder. Hierarchy is not relevant.",
        "tags": [
          "media"
        ],
        "operationId": "get-folder",
        "parameters": [
          {
            "name": "langtag",
            "in": "query",
            "description": "The langtag which specifies which language name filed should be used for sorting the files",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The folder",
            "schema": {
              "$ref": "#/definitions/Response: Folder"
            }
          }
        }
      },
      "put": {
        "summary": "Change folder",
        "description": "Changes folder.",
        "tags": [
          "media"
        ],
        "operationId": "change-folder",
        "parameters": [
          {
            "name": "folder",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request:Folder"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      },
      "delete": {
        "summary": "Delete folder",
        "description": "",
        "tags": [
          "media"
        ],
        "operationId": "delete-folder",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      }
    },
    "/system/reset": {
      "post": {
        "summary": "Reset system tables",
        "description": "Resets whole schema and re-initialize system tables",
        "tags": [
          "system"
        ],
        "operationId": "reset-system-tables",
        "parameters": [
          {
            "$ref": "#/parameters/nonce"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      }
    },
    "/system/resetDemo": {
      "post": {
        "summary": "Create demo tables",
        "description": "Creates two demo tables (Bundesländer, Regierungsbezirke) with links.",
        "tags": [
          "system"
        ],
        "operationId": "create-demo-tables",
        "parameters": [
          {
            "$ref": "#/parameters/nonce"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      }
    },
    "/system/versions": {
      "get": {
        "summary": "Get current version",
        "description": "",
        "tags": [
          "system"
        ],
        "operationId": "get-version",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The versions of the installation",
            "schema": {
              "$ref": "#/definitions/Response: Versions"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      }
    },
    "/system/services": {
      "get": {
        "summary": "Get all services",
        "description": "Returns an array containing all available services with their metadata.",
        "tags": [
          "system"
        ],
        "operationId": "get-all-services",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The services and their metadata",
            "schema": {
              "$ref": "#/definitions/Response: Services"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new service",
        "description": "Creates the service.",
        "tags": [
          "system"
        ],
        "operationId": "create-new-service",
        "parameters": [
          {
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request: Create service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new created service",
            "schema": {
              "$ref": "#/definitions/Shared Response: Service"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      }
    },
    "/system/services/{serviceId}": {
      "parameters": [
        {
          "$ref": "#/parameters/serviceId"
        }
      ],
      "get": {
        "summary": "Get service",
        "description": "Returns the metadata of a service.",
        "tags": [
          "system"
        ],
        "operationId": "get-service",
        "responses": {
          "200": {
            "description": "Metadata of the service",
            "schema": {
              "$ref": "#/definitions/Shared Response: Service"
            }
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "patch": {
        "summary": "Change service",
        "description": "Changes the service and returns its current metadata.",
        "tags": [
          "system"
        ],
        "operationId": "change-service",
        "parameters": [
          {
            "name": "service",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request: Create service"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Metadata of the service",
            "schema": {
              "$ref": "#/definitions/Shared Response: Service"
            }
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "delete": {
        "summary": "Delete a service",
        "description": "Drops the complete service and deletes its definition.",
        "tags": [
          "system"
        ],
        "operationId": "delete-service",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/system/annotations": {
      "get": {
        "summary": "Get all annotation configs",
        "description": "Returns an array containing all available annotation configs.",
        "tags": [
          "system"
        ],
        "operationId": "get-all-annotation-configs",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "The annotations",
            "schema": {
              "$ref": "#/definitions/Response: Annotation Configs"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      }
    },
    "/system/annotations/{annotationName}": {
      "parameters": [
        {
          "$ref": "#/parameters/annotationName"
        }
      ],
      "get": {
        "summary": "Get annotation config",
        "description": "Returns the config of an annotation.",
        "tags": [
          "system"
        ],
        "operationId": "get-annotation-config",
        "responses": {
          "200": {
            "description": "Config of the annotation",
            "schema": {
              "$ref": "#/definitions/CellAnnotationConfig"
            }
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "patch": {
        "summary": "Update annotation config",
        "description": "Updates an annotation config.",
        "tags": [
          "system"
        ],
        "operationId": "update-annotation-config",
        "parameters": [
          {
            "name": "annotation config",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CellAnnotationConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Config of the annotation",
            "schema": {
              "$ref": "#/definitions/CellAnnotationConfig"
            }
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "delete": {
        "summary": "Delete an annotation config",
        "description": "Deletes the config of an annotation.",
        "tags": [
          "system"
        ],
        "operationId": "delete-annotation-config",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/system/update": {
      "post": {
        "summary": "Update system tables",
        "description": "Updates schema of system tables. To get the nonce, take a look at the backend logs.",
        "tags": [
          "system"
        ],
        "operationId": "update-system-tables",
        "parameters": [
          {
            "$ref": "#/parameters/nonce"
          }
        ],
        "responses": {
          "200": {
            "description": "The versions of the installation",
            "schema": {
              "$ref": "#/definitions/Response: Versions"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      }
    },
    "/completetable": {
      "post": {
        "summary": "Create a complete table with columns and rows",
        "description": "Adds the table structure.",
        "tags": [
          "structure"
        ],
        "operationId": "create-new-complete-table",
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Request: Create complete table"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new table",
            "schema": {
              "$ref": "#/definitions/Shared Response: Table"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      }
    },
    "/tables": {
      "get": {
        "summary": "Get all tables",
        "description": "Returns an array containing all available tables with their metadata.",
        "tags": [
          "structure"
        ],
        "operationId": "get-all-tables",
        "consumes": [],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "Metadata for all tables.",
            "schema": {
              "$ref": "#/definitions/Response:Tables"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      },
      "post": {
        "summary": "Create a new empty table",
        "description": "Adds the table structure.",
        "tags": [
          "structure"
        ],
        "operationId": "create-new-empty-table",
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Request: Create empty table"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The new table",
            "schema": {
              "$ref": "#/definitions/Shared Response: Table"
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      }
    },
    "/tables/{tableId}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        }
      ],
      "get": {
        "summary": "Get table",
        "description": "Returns the metadata of a table.",
        "tags": [
          "structure"
        ],
        "operationId": "get-table",
        "parameters": [
          {
            "$ref": "#/parameters/tableId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/table-with-id"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "post": {
        "summary": "Change table",
        "description": "Changes the table",
        "tags": [
          "structure"
        ],
        "operationId": "change-table",
        "parameters": [
          {
            "name": "table",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Request: Create empty table"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/table-with-id"
          }
        }
      },
      "delete": {
        "summary": "Delete a table",
        "description": "Drops the complete table and deletes its definition.",
        "tags": [
          "structure"
        ],
        "operationId": "delete-table",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        }
      ],
      "get": {
        "summary": "Get columns definition",
        "description": "Returns all columns of specific table",
        "tags": [
          "structure"
        ],
        "operationId": "get-columns-definition",
        "responses": {
          "200": {
            "description": "Array of columns",
            "schema": {
              "$ref": "#/definitions/Response: Columns"
            }
          }
        }
      },
      "post": {
        "summary": "Create new column(s)",
        "description": "Alters the user table and add the column definition to the system table.",
        "tags": [
          "structure"
        ],
        "operationId": "create-new-column",
        "parameters": [
          {
            "name": "column",
            "in": "body",
            "required": false,
            "schema": {
              "type": "array",
              "required": [
                "columns"
              ],
              "properties": {
                "columns": {
                  "$ref": "#/definitions/Shared Request: Column"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The definition of the new column",
            "schema": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "example": 3
                    },
                    "ordering": {
                      "type": "integer",
                      "format": "int64",
                      "example": 3
                    }
                  },
                  "required": [
                    "id",
                    "ordering"
                  ]
                },
                "status": {
                  "type": "string",
                  "example": "ok"
                }
              },
              "required": [
                "columns",
                "status"
              ]
            }
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        }
      ],
      "get": {
        "summary": "Get column definition",
        "description": "Returns information about a specific column.",
        "tags": [
          "structure"
        ],
        "operationId": "get-column-definition",
        "responses": {
          "200": {
            "description": "The column definition",
            "schema": {
              "$ref": "#/definitions/Response: Columns"
            }
          }
        }
      },
      "post": {
        "summary": "Change column",
        "description": "Alters the column definition.",
        "tags": [
          "structure"
        ],
        "operationId": "change-column",
        "parameters": [
          {
            "name": "column",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "kind": {
                  "$ref": "#/definitions/Enum: Column type"
                },
                "ordering": {
                  "type": "integer",
                  "format": "int64",
                  "example": 1
                },
                "name": {
                  "type": "string",
                  "example": "New Column Name"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      },
      "delete": {
        "summary": "Delete column",
        "description": "Deletes column from user table and table definition.",
        "tags": [
          "structure"
        ],
        "operationId": "delete-column",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      }
    },
    "/groups": {
      "post": {
        "summary": "Create table group",
        "description": "Creates a table group.",
        "tags": [
          "structure"
        ],
        "operationId": "create-table-group",
        "parameters": [
          {
            "name": "group",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Request: create update table group"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tableGroup"
          }
        }
      }
    },
    "/groups/{groupId}": {
      "parameters": [
        {
          "$ref": "#/parameters/groupId"
        }
      ],
      "post": {
        "summary": "Change table group",
        "description": "Changes a table group.",
        "tags": [
          "structure"
        ],
        "operationId": "change-table-group",
        "parameters": [
          {
            "name": "group",
            "in": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Request: create update table group"
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/tableGroup"
          }
        }
      },
      "delete": {
        "summary": "Delete table group",
        "description": "Deletes a table group.",
        "tags": [
          "structure"
        ],
        "operationId": "delete-table-group",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        }
      ],
      "get": {
        "summary": "Get specific cell value",
        "description": "Returns the value of a specified cell.",
        "tags": [
          "content"
        ],
        "operationId": "retrieve-cell",
        "responses": {
          "200": {
            "$ref": "#/responses/cell-value"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "post": {
        "summary": "DEPRECATED - Update cell or add link/attachment",
        "description": "DEPRECATED: Use same route with PATCH instead. Updates the value of specified cell. This can add links, attachments, multi-language contents and replaces simple values such as numbers, booleans or strings.",
        "tags": [
          "content"
        ],
        "operationId": "update-cell-deprecated",
        "parameters": [
          {
            "$ref": "#/parameters/value"
          },
          {
            "$ref": "#/parameters/forceHistoryOpt"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/cell-value"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "patch": {
        "summary": "Update cell or add link/attachment",
        "description": "Updates the value of specified cell. This can add links, attachments, multi-language contents and replaces simple values such as numbers, booleans or strings.",
        "tags": [
          "content"
        ],
        "operationId": "update-cell",
        "parameters": [
          {
            "$ref": "#/parameters/value"
          },
          {
            "$ref": "#/parameters/forceHistoryOpt"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/cell-value"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "put": {
        "summary": "Replace cell value",
        "description": "Replace the current value of the specified cell. This overwrites all languages in a multi-language cell or deletes all links and replaces the data with the provided value.",
        "tags": [
          "content"
        ],
        "operationId": "replace-cell",
        "parameters": [
          {
            "$ref": "#/parameters/value"
          },
          {
            "$ref": "#/parameters/forceHistoryOpt"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/cell-value"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "delete": {
        "summary": "Remove a cell value.",
        "description": "Clears the set cell value and reset it to its default value.",
        "tags": [
          "content"
        ],
        "operationId": "clear-cell-value",
        "responses": {
          "200": {
            "$ref": "#/responses/cell-value"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/history/{languageTag}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/languageTagOpt"
        },
        {
          "$ref": "#/parameters/historyType"
        }
      ],
      "get": {
        "summary": "Retrieves the history entries of a table",
        "description": "Returns the history entries of a table.",
        "tags": [
          "history"
        ],
        "operationId": "retrieve-table-history-cell",
        "responses": {
          "200": {
            "$ref": "#/responses/history-cell"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/rows/{rowId}/history/{languageTag}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/rowId"
        },
        {
          "$ref": "#/parameters/languageTagOpt"
        },
        {
          "$ref": "#/parameters/historyType"
        }
      ],
      "get": {
        "summary": "Retrieves the history entries of a row",
        "description": "Returns the history entries of a row.",
        "tags": [
          "history"
        ],
        "operationId": "retrieve-row-history-cell",
        "responses": {
          "200": {
            "$ref": "#/responses/history-cell"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}/history/{languageTag}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        },
        {
          "$ref": "#/parameters/languageTagOpt"
        },
        {
          "$ref": "#/parameters/historyType"
        }
      ],
      "get": {
        "summary": "Retrieves the history entries of a cell",
        "description": "Returns the history entries of a specified cell.",
        "tags": [
          "history"
        ],
        "operationId": "retrieve-cell-history-cell",
        "responses": {
          "200": {
            "$ref": "#/responses/history-cell"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/rows": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        }
      ],
      "get": {
        "summary": "Get all rows",
        "description": "Returns just the rows of the table",
        "tags": [
          "data"
        ],
        "parameters": [
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/offset"
          },
          {
            "$ref": "#/parameters/final"
          },
          {
            "$ref": "#/parameters/archived"
          }
        ],
        "operationId": "get-all-rows",
        "responses": {
          "200": {
            "description": "",
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/Pagination"
                },
                {
                  "$ref": "#/definitions/Response: Rows"
                }
              ]
            }
          },
          "default": {
            "description": "Unexpected error",
            "schema": {
              "$ref": "#/responses/unknown-error"
            }
          }
        }
      },
      "post": {
        "summary": "Create new row",
        "description": "Adds new row to user table.",
        "tags": [
          "data"
        ],
        "operationId": "create-new-row",
        "parameters": [
          {
            "name": "New row object",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "required": [
                "columns",
                "rows"
              ],
              "properties": {
                "columns": {
                  "type": "array",
                  "description": "Array of column ids",
                  "properties": {
                    "id": {
                      "type": "integer",
                      "format": "int64",
                      "description": "Column id"
                    }
                  },
                  "required": [
                    "id"
                  ]
                },
                "rows": {
                  "type": "array",
                  "description": "Array of row ids",
                  "items": {
                    "$ref": "#/definitions/Shared Request: Row"
                  }
                },
                "rowPermissions": {
                  "type": "array",
                  "description": "Array of row permissions",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "example": {
                "columns": [
                  {
                    "id": 1
                  }
                ],
                "rows": [
                  {
                    "values": [
                      {
                        "de": "Column 1 multi language value"
                      }
                    ]
                  }
                ],
                "rowPermissions": [
                  "onlyUserGroupA",
                  "onlyUserGroupB"
                ]
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "New row as JSON"
          }
        }
      }
    },
    "/tables/{tableId}/rows/{rowId}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/rowId"
        }
      ],
      "get": {
        "summary": "Get single row",
        "description": "Returns a single row and its values.",
        "tags": [
          "data"
        ],
        "operationId": "get-single-row",
        "responses": {
          "200": {
            "description": "Single row",
            "schema": {
              "$ref": "#/definitions/Response: Rows"
            }
          }
        }
      },
      "delete": {
        "summary": "Delete row",
        "description": "Deletes a row from user table. Optionally, all rows associated with this row can be replaced by a another rowId provided via query parameter `replacingRowId`",
        "tags": [
          "data"
        ],
        "operationId": "delete-row",
        "parameters": [
          {
            "$ref": "#/parameters/replacingRowId"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          }
        }
      }
    },
    "/tables/{tableId}/rows/{rowId}/duplicate": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/rowId"
        }
      ],
      "post": {
        "parameters": [
          {
            "name": "skipConstrainedLinks",
            "description": "When true, do not duplicate links with `n:x` cardinality where `n < ∞`.",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "annotateSkipped",
            "description": "When true, annotate all columns which were not duplicated as \"Please double check\".",
            "in": "query",
            "required": false,
            "type": "boolean"
          },
          {
            "name": "Columns to duplicate",
            "description": "When given, duplicate only those columns. Query parameter `skipConstrainedLinks` dominates given columns.",
            "required": false,
            "type": "object",
            "in": "body",
            "schema": {
              "type": "object",
              "properties": {
                "columns": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "summary": "Duplicate a row.",
        "description": "Duplicates a row with the same values and returns the duplicated row.",
        "tags": [
          "data"
        ],
        "operationId": "duplicate-row",
        "responses": {
          "200": {
            "$ref": "#/responses/row"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/rows/{rowId}/dependent": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/rowId"
        }
      ],
      "get": {
        "summary": "Retrieve all dependent rows.",
        "description": "Retrieve all rows of tables that link to this row.",
        "tags": [
          "content"
        ],
        "operationId": "retrieve-dependent-rows",
        "responses": {
          "200": {
            "$ref": "#/responses/dependentRows"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/rows/{rowId}/annotations": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/rowId"
        }
      ],
      "patch": {
        "summary": "Add annotations to this row.",
        "description": "Adds new annotations to this row.",
        "tags": [
          "annotation"
        ],
        "operationId": "update-row-annotations",
        "parameters": [
          {
            "name": "row annotation",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "final": {
                  "type": "boolean"
                },
                "archived": {
                  "type": "boolean"
                }
              },
              "example": {
                "final": true,
                "archived": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/row"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/rows/annotations": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        }
      ],
      "patch": {
        "summary": "Add annotations to all rows of a table.",
        "description": "Adds new annotations to all rows of a table.",
        "tags": [
          "annotation"
        ],
        "operationId": "update-rows-annotations",
        "parameters": [
          {
            "name": "row annotation",
            "in": "body",
            "required": false,
            "schema": {
              "type": "object",
              "properties": {
                "final": {
                  "type": "boolean"
                },
                "archived": {
                  "type": "boolean"
                }
              },
              "example": {
                "final": true,
                "archived": true
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/limit"
        },
        {
          "$ref": "#/parameters/offset"
        },
        {
          "$ref": "#/parameters/final"
        },
        {
          "$ref": "#/parameters/archived"
        }
      ],
      "get": {
        "summary": "Get all rows of a specific column",
        "description": "Returns just the rows of the specified column of the table",
        "tags": [
          "data"
        ],
        "operationId": "get-all-rows-of-column",
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/Pagination"
                },
                {
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Shared Response: Row"
                      },
                      "example": [
                        {
                          "id": 1,
                          "values": [
                            "Shimano"
                          ],
                          "final": true
                        },
                        {
                          "id": 2,
                          "values": [
                            "Sram "
                          ],
                          "archived": true
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/responses/unknown-error"
              }
            }
          }
        }
      }
    },
    "/tables/{tableId}/columns/first/rows": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/limit"
        },
        {
          "$ref": "#/parameters/offset"
        },
        {
          "$ref": "#/parameters/final"
        },
        {
          "$ref": "#/parameters/archived"
        }
      ],
      "get": {
        "summary": "Get all rows of the first column",
        "description": "Returns just the rows of the first column of the table",
        "tags": [
          "data"
        ],
        "operationId": "get-all-rows-of-first-column",
        "responses": {
          "200": {
            "schema": {
              "type": "object",
              "allOf": [
                {
                  "$ref": "#/definitions/Pagination"
                },
                {
                  "properties": {
                    "rows": {
                      "type": "array",
                      "items": {
                        "$ref": "#/definitions/Shared Response: Row"
                      },
                      "example": [
                        {
                          "id": 1,
                          "values": [
                            "Shimano"
                          ],
                          "final": true
                        },
                        {
                          "id": 2,
                          "values": [
                            "Sram"
                          ],
                          "archived": true
                        }
                      ]
                    }
                  }
                }
              ]
            },
            "default": {
              "description": "Unexpected error",
              "schema": {
                "$ref": "#/responses/unknown-error"
              }
            }
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}/attachment/{attachmentId}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        },
        {
          "$ref": "#/parameters/attachmentId"
        }
      ],
      "delete": {
        "summary": "Remove single attachment from cell.",
        "description": "Removes a specified attachment from a cell.",
        "tags": [
          "content",
          "media"
        ],
        "operationId": "delete-attachment",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}/link/{linkId}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        },
        {
          "$ref": "#/parameters/linkId"
        }
      ],
      "delete": {
        "summary": "Delete a link in a cell",
        "description": "Removes a link from a cell.",
        "tags": [
          "content"
        ],
        "operationId": "delete-link",
        "responses": {
          "200": {
            "$ref": "#/responses/cell-value"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}/link/{linkId}/order": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        },
        {
          "$ref": "#/parameters/linkId"
        }
      ],
      "put": {
        "summary": "Changes the order of the link.",
        "description": "Changes the order of the links by reordering the specified link to the beginning, end or in front of another relative link.",
        "tags": [
          "content"
        ],
        "operationId": "update-cell-link-order",
        "parameters": [
          {
            "name": "location",
            "in": "body",
            "type": "object",
            "schema": {
              "$ref": "#/definitions/LocationType"
            }
          }
        ]
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}/foreignRows": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        },
        {
          "$ref": "#/parameters/limit"
        },
        {
          "$ref": "#/parameters/offset"
        },
        {
          "$ref": "#/parameters/final"
        },
        {
          "$ref": "#/parameters/archived"
        }
      ],
      "get": {
        "summary": "Get a list of foreign rows that can be linked to this cell.",
        "description": "Get a list of foreign rows that can be linked to this cell.",
        "tags": [
          "content"
        ],
        "operationId": "get-foreign-rows",
        "responses": {
          "200": {
            "$ref": "#/responses/foreignRows"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}/annotations": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        }
      ],
      "post": {
        "summary": "Add an new annotation to a cell.",
        "description": "Adds an annotation to a cell. Annotations with the same type and value will be merged.",
        "tags": [
          "annotation"
        ],
        "operationId": "add-cell-annotation",
        "parameters": [
          {
            "name": "annotation",
            "in": "body",
            "schema": {
              "type": "object",
              "required": [
                "type"
              ],
              "properties": {
                "langtags": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/LanguageTag"
                  }
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "error",
                    "warning",
                    "info",
                    "flag"
                  ]
                },
                "value": {
                  "type": "string",
                  "example": "needs-translation"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/cell-annotation"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "get": {
        "summary": "Get annotations of this cell.",
        "description": "Get annotations of this cell",
        "tags": [
          "annotation"
        ],
        "operationId": "get-cell-annotation",
        "responses": {
          "200": {
            "$ref": "#/responses/cell-annotations"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}/annotations/{annotationId}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        },
        {
          "$ref": "#/parameters/annotationId"
        }
      ],
      "delete": {
        "summary": "Remove an annotation from a cell.",
        "description": "Removes an annotation for all language tags from a cell.",
        "tags": [
          "annotation"
        ],
        "operationId": "clear-cell-annotation",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/columns/{columnId}/rows/{rowId}/annotations/{annotationId}/{languageTag}": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/columnId"
        },
        {
          "$ref": "#/parameters/rowId"
        },
        {
          "$ref": "#/parameters/annotationId"
        },
        {
          "$ref": "#/parameters/languageTag"
        }
      ],
      "delete": {
        "summary": "Remove annotation for a language from a cell.",
        "description": "Removes an annotation for a specific language tag from a cell.",
        "tags": [
          "annotation"
        ],
        "operationId": "clear-cell-annotation-language-tag",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    },
    "/tables/{tableId}/rows/{rowId}/permissions": {
      "parameters": [
        {
          "$ref": "#/parameters/tableId"
        },
        {
          "$ref": "#/parameters/rowId"
        }
      ],
      "patch": {
        "summary": "Add permissions to this row.",
        "description": "Add permissions to this row.",
        "tags": [
          "permission"
        ],
        "operationId": "add-row-permissions",
        "parameters": [
          {
            "$ref": "#/parameters/rowPermissionBody"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "delete": {
        "summary": "Delete all permissions of this row.",
        "description": "Delete permissions of this row.",
        "tags": [
          "permission"
        ],
        "operationId": "delete-row-permissions",
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      },
      "put": {
        "summary": "Replace permissions of this row.",
        "description": "Replace current permissions of this row. This overwrites all permissions of this row with the new provided permission array.",
        "tags": [
          "permission"
        ],
        "operationId": "replace-row-permissions",
        "parameters": [
          {
            "$ref": "#/parameters/rowPermissionBody"
          }
        ],
        "responses": {
          "200": {
            "$ref": "#/responses/ok-empty-body"
          },
          "404": {
            "$ref": "#/responses/not-found-in-database"
          }
        }
      }
    }
  },
  "definitions": {
    "Property:Description": {
      "type": "object",
      "properties": {
        "description": {
          "type": "object",
          "example": {
            "de": "Eine Beschreibung der Entität",
            "en": "A description of the entity"
          }
        }
      },
      "required": [
        "description"
      ]
    },
    "Property:DisplayName": {
      "type": "object",
      "properties": {
        "displayName": {
          "type": "object",
          "example": {
            "de": "Künstler",
            "en": "Artist"
          }
        }
      },
      "required": [
        "displayName"
      ]
    },
    "Property:TableGroup": {
      "type": "object",
      "properties": {
        "group": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/Property:DisplayName"
            },
            {
              "$ref": "#/definitions/Property:Description"
            }
          ]
        }
      },
      "required": [
        "displayName"
      ]
    },
    "Property:TableGroupWithId": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Id"
        },
        {
          "$ref": "#/definitions/Property:TableGroup"
        }
      ]
    },
    "Property:Status": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "required": [
        "status"
      ]
    },
    "Property:Id": {
      "type": "object",
      "properties": {
        "id": {
          "type": "int64",
          "example": 423
        }
      },
      "required": [
        "id"
      ]
    },
    "CellValue": {
      "type": "any",
      "example": {
        "en": "Hello",
        "de": "Hallo"
      },
      "description": "New cell value, depending on the type of the column."
    },
    "CellAnnotation": {
      "type": "object",
      "required": [
        "uuid",
        "type",
        "value",
        "createdAt"
      ],
      "properties": {
        "uuid": {
          "description": "uuid of the annotation",
          "type": "string",
          "example": "3c32cd06-f27e-4f5e-86a9-d70f7058f7c7"
        },
        "type": {
          "description": "type of the annotation",
          "type": "string",
          "example": "flag"
        },
        "value": {
          "description": "value of the annotation",
          "type": "string",
          "example": "important"
        },
        "createdAt": {
          "description": "timestamp of creation",
          "type": "string",
          "example": "2022-07-21T19:11:36.499Z"
        }
      }
    },
    "CellAnnotationConfig": {
      "type": "object",
      "required": [
        "name",
        "priority",
        "fgColor",
        "bgColor",
        "displayName",
        "isMultilang",
        "isDashboard"
      ],
      "properties": {
        "name": {
          "description": "name of the annotation",
          "type": "string",
          "example": "important"
        },
        "priority": {
          "description": "priority of the annotation",
          "type": "number",
          "example": 1
        },
        "fgColor": {
          "description": "foreground color of the annotation",
          "type": "string",
          "example": "#ffffff"
        },
        "bgColor": {
          "description": "background color of the annotation",
          "type": "string",
          "example": "#ff7474"
        },
        "displayName": {
          "description": "display name of the annotation as multilang obj",
          "type": "object",
          "example": {
            "de": "Wichtig",
            "en": "Important"
          }
        },
        "isMultilang": {
          "description": "multilang flag for the annotation",
          "type": "boolean",
          "example": false
        },
        "isDashboard": {
          "description": "dashboard flag for the annotation",
          "type": "boolean",
          "example": true
        },
        "isCustom": {
          "description": "custom flag for the annotation",
          "type": "boolean",
          "example": true
        }
      }
    },
    "Pagination": {
      "type": "object",
      "required": [
        "page"
      ],
      "properties": {
        "page": {
          "description": "Pagination",
          "type": "object",
          "properties": {
            "limit": {
              "type": "integer",
              "example": 100
            },
            "offset": {
              "type": "integer",
              "example": 100
            },
            "totalSize": {
              "description": "Total number of rows depending on filter query parameters. If no filters are set, totalSize is the total number of rows in the table",
              "type": "integer",
              "example": 315
            }
          }
        }
      }
    },
    "LanguageTag": {
      "description": "A language tag in RFC 5646 format.",
      "type": "string",
      "format": "languageTag",
      "example": "de"
    },
    "LocationType": {
      "type": "object",
      "properties": {
        "location": {
          "description": "Sets the new order to be either the first (=start), the last (=end) or in front of another entity (=before).",
          "type": "string",
          "enum": [
            "start",
            "end",
            "before"
          ]
        },
        "id": {
          "description": "If using \"before\", we need to provide the id of a relative entity, so the referenced entity can be put before this.",
          "type": "integer",
          "format": "int64"
        }
      },
      "required": [
        "location"
      ]
    },
    "Table": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Description"
        },
        {
          "$ref": "#/definitions/Property:DisplayName"
        },
        {
          "$ref": "#/definitions/Property:TableGroupWithId"
        }
      ],
      "required": [
        "name",
        "hidden"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "someTable"
        },
        "hidden": {
          "type": "boolean",
          "example": false
        }
      }
    },
    "TableWithId": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Id"
        },
        {
          "$ref": "#/definitions/Table"
        }
      ]
    },
    "Column": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Description"
        },
        {
          "$ref": "#/definitions/Property:DisplayName"
        }
      ],
      "required": [
        "name",
        "multilanguage",
        "ordering",
        "identifier",
        "kind"
      ],
      "properties": {
        "name": {
          "description": "An internal name that can be used in the Aggregator, for example.",
          "type": "string",
          "example": "someColumn"
        },
        "identifier": {
          "description": "A setting whether this column shows up in the ID column (used to show important information in links).",
          "type": "boolean",
          "example": "false"
        },
        "kind": {
          "description": "The type of the column.",
          "type": "string",
          "enum": [
            "attachment",
            "boolean",
            "concat",
            "currency",
            "datetime",
            "link",
            "numeric",
            "shorttext",
            "text"
          ]
        },
        "multilanguage": {
          "description": "If the values of the cells are translatable or not, this is set to true. You need to check the languageType setting, whether to check for language or for country specific values.",
          "type": "boolean",
          "example": "true"
        },
        "ordering": {
          "description": "A value to put the column in the correct order in the table.",
          "type": "integer",
          "format": "int64"
        },
        "languageType": {
          "description": "The language type of the column. It can be single language (see \"multilanguage\" property), multilanguage (language) or multicountry (country).",
          "type": "string",
          "enum": [
            "country",
            "language"
          ]
        },
        "toTable": {
          "description": "The table it links to, if the column is of kind \"link\".",
          "type": "integer",
          "format": "int64"
        },
        "countryCodes": {
          "description": "The possible country values if the languageType is set to \"country\".",
          "type": "string",
          "format": "countryCode"
        }
      }
    },
    "ColumnWithId": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Id"
        },
        {
          "$ref": "#/definitions/Column"
        }
      ]
    },
    "DependentRow": {
      "description": "The complete row containing the values of the cells.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Id"
        }
      ],
      "properties": {
        "value": {
          "description": "The value of the ID column linking here.",
          "schema": {
            "$ref": "#/definitions/CellValue"
          }
        }
      },
      "required": [
        "id",
        "value"
      ]
    },
    "Response:Status": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ]
    },
    "Response:Table": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        },
        {
          "$ref": "#/definitions/TableWithId"
        }
      ]
    },
    "Response:Tables": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ],
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TableWithId"
          }
        }
      },
      "required": [
        "tables"
      ]
    },
    "Response: Services": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ],
      "properties": {
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shared Response: Service"
          }
        }
      },
      "required": [
        "services"
      ]
    },
    "Response: Annotation Configs": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ],
      "properties": {
        "annotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CellAnnotationConfig"
          }
        }
      },
      "required": [
        "annotations"
      ]
    },
    "Response:Cell": {
      "description": "The cell value.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        },
        {
          "$ref": "#/definitions/Property:RowLevelAnnotations"
        }
      ],
      "properties": {
        "value": {
          "type": "any",
          "example": {
            "de": "Bayern",
            "en": "Bavaria"
          }
        }
      },
      "required": [
        "value"
      ]
    },
    "Response:HistoryRows": {
      "description": "All history entries that belongs to the request (filtered based on cell, row or table).",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ],
      "properties": {
        "rows": {
          "description": "An array with all history entries based on the request filter",
          "type": "array",
          "items": {
            "$ref": "#/definitions/HistoryRow"
          }
        }
      },
      "required": [
        "rows"
      ]
    },
    "HistoryRow": {
      "description": "Cell history.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ],
      "required": [
        "revision",
        "event",
        "historyType",
        "author",
        "timestamp"
      ],
      "properties": {
        "author": {
          "description": "Name of the user who has triggered a change",
          "type": "string",
          "example": "Bob"
        },
        "columnId": {
          "description": "The id of the column",
          "type": "integer",
          "example": 1
        },
        "event": {
          "description": "The event of the change",
          "type": "string",
          "enum": [
            "cell_changed",
            "row_created",
            "row_deleted",
            "annotation_added",
            "annotation_removed",
            "row_permissions_changed"
          ]
        },
        "historyType": {
          "$ref": "#/definitions/Enum: HistoryType"
        },
        "languageType": {
          "description": "The language type of the column",
          "type": "string",
          "enum": [
            "neutral",
            "language",
            "country"
          ]
        },
        "revision": {
          "description": "Identifier sequence of a history entry",
          "type": "integer"
        },
        "rowId": {
          "description": "The id of the row, could be empty, e.g. for row history entries",
          "type": "integer",
          "example": 1
        },
        "timestamp": {
          "description": "Timestamp of the change",
          "type": "string",
          "example": "2019-01-14T16:02:37.129+01:00"
        },
        "value": {
          "description": "The value of a change",
          "type": "any",
          "example": {
            "de-DE": "a german value changed"
          }
        },
        "valueType": {
          "description": "The type of the value. For cell changes this is the column type. In case of annotations it's the type of the flag or of the comment",
          "type": "string",
          "enum": [
            "text",
            "richtext",
            "shorttext",
            "numeric",
            "link",
            "attachment",
            "boolean",
            "date",
            "datetime",
            "concat",
            "currency",
            "group",
            "permissions"
          ]
        }
      }
    },
    "Response:CellAnnotation": {
      "description": "The annotation of a cell.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        },
        {
          "$ref": "#/definitions/CellAnnotation"
        }
      ]
    },
    "Response:CellAnnotations": {
      "description": "A List of annotations of a cell.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ],
      "properties": {
        "annotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CellAnnotation"
          }
        }
      },
      "required": [
        "annotations"
      ]
    },
    "Response:Row": {
      "description": "The complete row containing the values of the cells.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        },
        {
          "$ref": "#/definitions/Property:Id"
        }
      ],
      "properties": {
        "values": {
          "description": "An array with all cells included. It is sorted by the current order of the columns of the table.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/CellValue"
          }
        },
        "final": {
          "description": "A flag describing whether the row is final or not.",
          "type": "boolean"
        }
      },
      "required": [
        "values",
        "final"
      ]
    },
    "Response:DependentRow": {
      "description": "A row that links to a specified row.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ],
      "properties": {
        "table": {
          "schema": {
            "$ref": "#/definitions/TableWithId"
          }
        },
        "column": {
          "schema": {
            "$ref": "#/definitions/ColumnWithId"
          }
        },
        "rows": {
          "schema": {
            "$ref": "#/definitions/Response:Row"
          }
        },
        "final": {
          "description": "A flag describing whether the row is final or not.",
          "type": "boolean"
        }
      },
      "required": [
        "values",
        "final"
      ]
    },
    "Response:DependentRows": {
      "description": "All rows that link to the specified row.",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        }
      ],
      "properties": {
        "dependentRows": {
          "description": "An array with all rows depending on the selected row",
          "type": "array",
          "items": {
            "$ref": "#/definitions/DependentRow"
          }
        }
      },
      "required": [
        "dependentRows"
      ]
    },
    "Response:ForeignRows": {
      "description": "An array with all linkable rows to the specified cell",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        },
        {
          "$ref": "#/definitions/Pagination"
        }
      ],
      "properties": {
        "rows": {
          "description": "An array with all rows depending on the selected row",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shared Response: Row"
          }
        }
      },
      "required": [
        "rows"
      ]
    },
    "Request:Folder": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the folder"
        },
        "description": {
          "type": "string",
          "description": "Description of the folder"
        },
        "parent": {
          "type": "int64",
          "description": "id of the parent folder"
        }
      },
      "description": "Creates a new folder. If parent is empty the folder will be created in the root folder.",
      "example": {
        "name": "Folder 1",
        "description": "This is a folder description",
        "parent": 1
      }
    },
    "Response: Folder": {
      "type": "object",
      "required": [
        "createdAt",
        "description",
        "files",
        "name",
        "status",
        "subfolders",
        "updatedAt"
      ],
      "properties": {
        "parent": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "createdAt": {
          "type": "object"
        },
        "name": {
          "type": "string",
          "example": "root"
        },
        "description": {
          "type": "string"
        },
        "files": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response: File"
          }
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "subfolders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Response: Subfolder"
          }
        },
        "updatedAt": {
          "type": "object"
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "description": "Complete folder with subfolders and files.",
      "example": {
        "id": 1,
        "name": "root",
        "description": "",
        "subfolders": [
          {
            "id": 1,
            "name": "Subfolder 123",
            "description": "Subfolder 123 is awesome",
            "createdAt": "2016-01-13T17:23:18.402+01:00",
            "updatedAt": "2016-01-14T10:57:29.845+01:00"
          }
        ],
        "files": [
          {
            "url": {
              "de-DE": "/files/7e3982f3-7328-45f9-b499-9424a20bf5ff/de-DE/01520_chicagoskyline_1920x1200.jpg"
            },
            "uuid": "7e3982f3-7328-45f9-b499-9424a20bf5ff",
            "title": {
              "de-DE": "Deutscher Titel"
            },
            "description": {
              "de-DE": "Deutsche Beschreibung"
            },
            "internalName": {
              "de-DE": "d6a011e9-3599-400c-9651-9a778dfc3f9c.jpg"
            },
            "externalName": {
              "de-DE": "01520_chicagoskyline_1920x1200.jpg"
            },
            "mimeType": {
              "de-DE": "image/jpeg"
            },
            "createdAt": "2016-01-13T11:22:06.990+01:00",
            "updatedAt": "2016-01-13T11:22:07.044+01:00"
          }
        ],
        "status": "ok"
      }
    },
    "Response: Cell": {
      "type": "object",
      "required": [
        "rows",
        "status"
      ],
      "properties": {
        "rows": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "object",
                "example": "Baden-Württemberg"
              }
            },
            "required": [
              "value"
            ]
          }
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "description": "Value of a single cell."
    },
    "Request: Create complete table": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "description": "Array of columns (kind 'link' is not allowed)",
          "items": {
            "$ref": "#/definitions/Shared Request: Column"
          }
        },
        "name": {
          "type": "string",
          "example": "Bundesländer Deutschlands"
        },
        "rows": {
          "type": "array",
          "description": "Array of rows",
          "items": {
            "$ref": "#/definitions/Shared Request: Row"
          }
        }
      },
      "description": "Creates a new table with columns and rows. If columns & rows are empty an empty table will be created.",
      "example": {
        "name": "Bundesländer Deutschlands",
        "columns": [
          {
            "kind": "text",
            "name": "Land",
            "ordering": 1
          },
          {
            "kind": "text",
            "name": "Hauptstadt",
            "ordering": 2
          }
        ],
        "rows": [
          {
            "values": [
              "Baden-Württemberg",
              "Stuttgart"
            ]
          },
          {
            "values": [
              "Bayern",
              "München"
            ]
          }
        ]
      }
    },
    "Request: Create empty table": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "states of germany"
        },
        "displayName": {
          "$ref": "#/definitions/Multi-language object"
        },
        "description": {
          "$ref": "#/definitions/Multi-language object"
        },
        "hidden": {
          "type": "boolean"
        }
      },
      "description": "Creates a new empty table.",
      "example": {
        "name": "germany_states",
        "displayName": {
          "en": "States of Germany",
          "de": "Bundesländer Deutschlands"
        },
        "description": {
          "en": "This table holds a list of all states of germany",
          "de": "diese Tabelle beinhaltet alle Bundesländer Deutschlands"
        },
        "hidden": false
      }
    },
    "Request: create update table group": {
      "type": "object",
      "required": [
        "displayName"
      ],
      "properties": {
        "displayName": {
          "$ref": "#/definitions/Multi-language object"
        },
        "description": {
          "$ref": "#/definitions/Multi-language object"
        }
      },
      "example": {
        "displayName": {
          "en": "Common",
          "de": "Allgemein"
        },
        "description": {
          "en": "Groups all common tables",
          "de": "Gruppiert alle allgemeinen Tabellen"
        }
      }
    },
    "Response:TableGroup": {
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/Property:Status"
        },
        {
          "$ref": "#/definitions/Property:TableGroupWithId"
        }
      ],
      "required": [
        "tables"
      ]
    },
    "Request: Create service": {
      "type": "object",
      "required": [
        "name",
        "action"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "my first service"
        },
        "action": {
          "$ref": "#/definitions/Enum: Service type"
        },
        "displayName": {
          "$ref": "#/definitions/Multi-language object"
        },
        "description": {
          "$ref": "#/definitions/Multi-language object"
        },
        "active": {
          "type": "boolean"
        },
        "ordering": {
          "description": "A value to put the service in the correct order in the service list.",
          "type": "integer",
          "format": "int64"
        },
        "config": {
          "description": "An object that represents the configuration of a service.",
          "type": "object"
        },
        "scope": {
          "description": "An object that represents the scope of a service.",
          "type": "object"
        }
      },
      "description": "Creates a new service.",
      "example": {
        "type": "action",
        "name": "my first service",
        "ordering": 42,
        "active": true,
        "description": {
          "de": "Beschreibung",
          "en": "description"
        },
        "displayName": {
          "de": "Vorschau Dashboard",
          "en": "Preview Dashboard"
        },
        "config": {
          "url": "https://any.customer.com/endpoint",
          "header": {
            "API-Key": "1234n"
          }
        },
        "scope": {
          "type": "global"
        }
      }
    },
    "Response: Complete table": {
      "type": "object",
      "required": [
        "columns",
        "id",
        "name",
        "rows",
        "status"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shared Response: Column"
          }
        },
        "name": {
          "type": "string",
          "example": "Bundesländer Deutschlands",
          "description": "Name of table"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Id of table"
        },
        "rows": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shared Response: Row"
          }
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "description": "Complete table with columns and rows.",
      "example": {
        "status": "ok",
        "id": 2,
        "name": "Bundesländer Deutschlands",
        "columns": [
          {
            "id": 1,
            "name": "Land",
            "kind": "text",
            "ordering": 1
          },
          {
            "id": 2,
            "name": "Hauptstadt",
            "kind": "text",
            "ordering": 2
          },
          {
            "id": 3,
            "name": "Regierungsbezirke",
            "kind": "link",
            "toTable": 3,
            "toColumn": 1,
            "ordering": 3
          }
        ],
        "rows": [
          {
            "id": 1,
            "values": [
              "Baden-Württemberg",
              "Stuttgart",
              [
                {
                  "id": 3,
                  "value": "Tübingen"
                },
                {
                  "id": 4,
                  "value": "Karlsruhe"
                }
              ]
            ]
          },
          {
            "id": 2,
            "values": [
              "Bayern",
              "München",
              [
                {
                  "id": 1,
                  "value": "Oberbayern"
                },
                {
                  "id": 2,
                  "value": "Niederbayern"
                }
              ]
            ]
          }
        ]
      }
    },
    "Response: Versions": {
      "type": "object",
      "description": "The currently used versions",
      "required": [
        "versions",
        "status"
      ],
      "properties": {
        "versions": {
          "type": "object",
          "required": [
            "implementation",
            "git",
            "build",
            "database"
          ],
          "properties": {
            "implementation": {
              "type": "object",
              "description": "The underlying backend (usually the JVM)",
              "required": [
                "vendor",
                "title",
                "version"
              ],
              "properties": {
                "vendor": {
                  "type": "string",
                  "example": "N/A",
                  "description": "Author of the JVM implementation"
                },
                "title": {
                  "type": "string",
                  "example": "Java Runtime Environment",
                  "description": "Title"
                },
                "version": {
                  "type": "string",
                  "example": "1.8.0_111",
                  "description": "Version of the JVM"
                }
              }
            },
            "git": {
              "type": "object",
              "description": "The underlying git versions",
              "required": [
                "branch",
                "commit",
                "date"
              ],
              "properties": {
                "branch": {
                  "type": "string",
                  "example": "DEVELOPMENT",
                  "description": "The branch of git"
                },
                "commit": {
                  "type": "string",
                  "example": "DEVELOPMENT",
                  "description": "The latest commit"
                },
                "date": {
                  "type": "string",
                  "example": "DEVELOPMENT",
                  "description": "The date of the commit"
                }
              }
            },
            "build": {
              "type": "object",
              "required": [
                "date",
                "jdk"
              ],
              "properties": {
                "date": {
                  "type": "string",
                  "example": "DEVELOPMENT",
                  "description": "Date of the build"
                },
                "jdk": {
                  "type": "string",
                  "example": "DEVELOPMENT",
                  "description": "JVM used to build"
                }
              }
            },
            "database": {
              "type": "object",
              "required": [
                "current",
                "specification"
              ],
              "properties": {
                "current": {
                  "type": "integer",
                  "format": "int64",
                  "example": 17,
                  "description": "The current version of the database"
                },
                "specification": {
                  "type": "integer",
                  "format": "int64",
                  "example": 18,
                  "description": "The version of the implementation - if this is higher, you need to update the current database"
                }
              }
            }
          }
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "example": {
        "versions": {
          "implementation": {
            "vendor": "N/A",
            "title": "Java Runtime Environment",
            "version": "1.8.0_111"
          },
          "git": {
            "branch": "DEVELOPMENT",
            "commit": "DEVELOPMENT",
            "date": "DEVELOPMENT"
          },
          "build": {
            "date": "DEVELOPMENT",
            "jdk": "DEVELOPMENT"
          },
          "database": {
            "current": 18,
            "specification": 18
          }
        },
        "status": "ok"
      }
    },
    "Response: Array of tables": {
      "type": "object",
      "required": [
        "status",
        "tables"
      ],
      "properties": {
        "tables": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Shared Response: Table"
          }
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "description": "Array of tables",
      "example": {
        "status": "ok",
        "tables": [
          {
            "id": "1",
            "name": "Bundesländer Deutschlands"
          },
          {
            "id": "2",
            "name": "Regierungsbezirke"
          }
        ]
      }
    },
    "Shared Response: Table": {
      "type": "object",
      "required": [
        "id",
        "name",
        "status"
      ],
      "properties": {
        "name": {
          "type": "string",
          "example": "Bundesländer Deutschlands",
          "description": "Name of table"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Id of table"
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "description": "Complete table with columns and rows.",
      "example": {
        "status": "ok",
        "id": 2,
        "name": "Bundesländer Deutschlands"
      }
    },
    "Shared Response: Column": {
      "type": "object",
      "description": "Information about a column",
      "required": [
        "id",
        "kind",
        "name",
        "ordering"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int32",
          "example": 1,
          "description": "Id of column"
        },
        "name": {
          "type": "string",
          "example": "Land"
        },
        "kind": {
          "$ref": "#/definitions/Enum: Column type"
        },
        "ordering": {
          "type": "integer",
          "format": "int32",
          "example": 1
        },
        "toTable": {
          "type": "integer",
          "format": "int32",
          "example": 2,
          "description": "Optional, only needed if kind is link."
        },
        "toColumn": {
          "type": "integer",
          "format": "int32",
          "description": "Optional, only needed if kind is link.",
          "example": 2
        },
        "constraint": {
          "$ref": "#/definitions/constraint"
        }
      }
    },
    "Shared Response: Row": {
      "type": "object",
      "required": [
        "id",
        "values"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Id of row"
        },
        "values": {
          "type": "array",
          "example": [
            "Baden-Württemberg",
            "Stuttgart",
            [
              {
                "id": 3,
                "value": "Tübingen"
              },
              {
                "id": 4,
                "value": "Karlsruhe"
              }
            ]
          ],
          "items": {
            "type": "object"
          }
        },
        "final": {
          "type": "boolean",
          "example": true,
          "description": "A flag describing whether the row is final or not. Only present if final is set to true."
        },
        "archived": {
          "type": "boolean",
          "example": true,
          "description": "A flag describing whether the row is archived or not. Only present if archived is set to true."
        },
        "annotations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CellAnnotation"
          }
        }
      },
      "description": "A row contains all column values of this specific table."
    },
    "Shared Response: Service": {
      "type": "object",
      "required": [
        "id",
        "name",
        "status"
      ],
      "properties": {
        "status": {
          "type": "string",
          "example": "ok"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1,
          "description": "Id of service"
        },
        "name": {
          "type": "string",
          "example": "my first service"
        },
        "action": {
          "$ref": "#/definitions/Enum: Service type"
        },
        "displayName": {
          "$ref": "#/definitions/Multi-language object"
        },
        "description": {
          "$ref": "#/definitions/Multi-language object"
        },
        "active": {
          "type": "boolean"
        },
        "ordering": {
          "description": "A value to put the service in the correct order in the service list.",
          "type": "integer",
          "format": "int64"
        },
        "config": {
          "description": "An object that represents the configuration of a service.",
          "type": "object"
        },
        "scope": {
          "description": "An object that represents the scope of a service.",
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "example": "2016-01-13T11:22:07.044+01:00"
        },
        "updatedAt": {
          "type": "string",
          "example": "2016-01-13T11:22:07.044+01:00"
        }
      },
      "description": "Service with its data",
      "example": {
        "status": "ok",
        "id": 1,
        "type": "action",
        "name": "my first service",
        "ordering": 42,
        "active": true,
        "description": {
          "de": "Beschreibung",
          "en": "description"
        },
        "displayName": {
          "de": "Vorschau Dashboard",
          "en": "Preview Dashboard"
        },
        "config": {
          "url": "https://any.customer.com/endpoint",
          "header": {
            "API-Key": "1234n"
          }
        },
        "scope": {
          "type": "global"
        },
        "createdAt": "2019-03-18T18:09:22.551+01:00",
        "updatedAt": "2019-03-18T18:09:22.573+01:00"
      }
    },
    "Shared Request: Row": {
      "type": "object",
      "required": [
        "values"
      ],
      "properties": {
        "values": {
          "type": "array",
          "description": "Array of values",
          "items": {
            "type": "object"
          }
        }
      },
      "description": "A row object, which is used to add a new row to a table, has only an array of values.",
      "example": {
        "values": [
          "Column 1 Value",
          "Column 2 Value"
        ]
      }
    },
    "Response: Columns": {
      "type": "object",
      "required": [
        "columns",
        "status"
      ],
      "properties": {
        "columns": {
          "type": "array",
          "description": "Array of column",
          "items": {
            "$ref": "#/definitions/Shared Response: Column"
          },
          "minItems": 1
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "description": "Array of columns"
    },
    "Response: File": {
      "type": "object",
      "required": [
        "createdAt",
        "description",
        "externalName",
        "internalName",
        "mimeType",
        "status",
        "title",
        "updatedAt",
        "url",
        "uuid"
      ],
      "properties": {
        "internalName": {
          "type": "object",
          "properties": {
            "de-DE": {
              "type": "string",
              "example": "d6a011e9-3599-400c-9651-9a778dfc3f9c.jpg"
            }
          },
          "required": [
            "de-DE"
          ]
        },
        "createdAt": {
          "type": "string",
          "example": "2016-01-13T11:22:06.990+01:00"
        },
        "externalName": {
          "type": "object",
          "properties": {
            "de-DE": {
              "type": "string",
              "example": "01520_chicagoskyline_1920x1200.jpg"
            }
          },
          "required": [
            "de-DE"
          ]
        },
        "description": {
          "type": "object",
          "properties": {
            "de-DE": {
              "type": "string",
              "example": "Deutsche Beschreibung"
            }
          },
          "required": [
            "de-DE"
          ]
        },
        "mimeType": {
          "type": "object",
          "properties": {
            "de-DE": {
              "type": "string",
              "example": "image/jpeg"
            }
          },
          "required": [
            "de-DE"
          ]
        },
        "title": {
          "type": "object",
          "properties": {
            "de-DE": {
              "type": "string",
              "example": "Deutscher Titel"
            }
          },
          "required": [
            "de-DE"
          ]
        },
        "uuid": {
          "type": "string",
          "example": "7e3982f3-7328-45f9-b499-9424a20bf5ff"
        },
        "url": {
          "type": "object",
          "properties": {
            "de-DE": {
              "type": "string",
              "example": "/files/7e3982f3-7328-45f9-b499-9424a20bf5ff/de-DE/01520_chicagoskyline_1920x1200.jpg"
            }
          },
          "required": [
            "de-DE"
          ]
        },
        "updatedAt": {
          "type": "string",
          "example": "2016-01-13T11:22:07.044+01:00"
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "description": "File meta information"
    },
    "Multi-language object": {
      "type": "object",
      "description": "A multi-language object is a key-value object for multi-language values. Keys a langtags (e.g. de-DE) and the values are the value of that object in the specific language.",
      "example": {
        "de-DE": "Hallo"
      }
    },
    "Response: Rows": {
      "type": "object",
      "required": [
        "rows",
        "status"
      ],
      "properties": {
        "rows": {
          "type": "array",
          "description": "Array of rows",
          "items": {
            "$ref": "#/definitions/Shared Response: Row"
          }
        },
        "status": {
          "type": "string",
          "example": "ok"
        }
      },
      "description": "Array of rows"
    },
    "Enum: Column type": {
      "type": "string",
      "description": "Different types of column",
      "enum": [
        "text",
        "shorttext",
        "numeric",
        "boolean",
        "link",
        "date",
        "datetime",
        "currency",
        "group"
      ]
    },
    "Enum: Service type": {
      "type": "string",
      "description": "Different types of services",
      "enum": [
        "action",
        "filter",
        "listener"
      ]
    },
    "Enum: HistoryType": {
      "type": "string",
      "description": "The type of the history entry",
      "enum": [
        "row",
        "cell",
        "comment",
        "cell_flag",
        "row_flag",
        "row_permissions"
      ]
    },
    "Response: Subfolder": {
      "type": "object",
      "required": [
        "createdAt",
        "description",
        "id",
        "name",
        "parent",
        "updatedAt"
      ],
      "properties": {
        "parent": {
          "type": "object"
        },
        "createdAt": {
          "type": "string",
          "example": "2016-01-13T17:23:18.402+01:00"
        },
        "name": {
          "type": "string",
          "example": "Subfolder 123"
        },
        "description": {
          "type": "string",
          "example": "Subfolder 123 is awesome"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "updatedAt": {
          "type": "string",
          "example": "2016-01-14T10:57:29.845+01:00"
        }
      },
      "description": "A subfolder returned in a request to folders"
    },
    "Shared Request: Column": {
      "type": "array",
      "required": [
        "kind",
        "name",
        "ordering"
      ],
      "properties": {
        "kind": {
          "$ref": "#/definitions/Enum: Column type"
        },
        "identifier": {
          "type": "boolean",
          "description": "Flag if this column should be part of the concatenated identifier column.",
          "example": true
        },
        "ordering": {
          "type": "integer",
          "format": "int64",
          "example": 1
        },
        "displayName": {
          "$ref": "#/definitions/Multi-language object"
        },
        "name": {
          "type": "string",
          "example": "Hauptstadt",
          "description": "An internal name that can be used to easily identify tables instead of using an id."
        },
        "description": {
          "$ref": "#/definitions/Multi-language object"
        },
        "frontendReadOnly": {
          "type": "boolean",
          "description": "Flag if values of this column can be changed from frontend.",
          "example": true
        },
        "groups": {
          "type": "array",
          "description": "A list of column ids that should build a group column",
          "example": [
            1,
            2,
            3
          ]
        },
        "formatPattern": {
          "type": "string",
          "description": "Pattern for the frontend how to render the content of a group column",
          "example": "{{1}} × {{2}} × {{3}} mm (B × H × T)"
        },
        "showMemberColumns": {
          "type": "boolean",
          "description": "Flag if the member columns should be displayed in the frontend table view (They are always displayed in entity view).",
          "example": true
        },
        "minLength": {
          "type": "integer",
          "description": "Minimum length of the value, only for text columns",
          "format": "int32",
          "example": 1
        },
        "maxLength": {
          "type": "integer",
          "description": "Maximum length of the value, only for text columns",
          "format": "int32",
          "example": 255
        },
        "decimalDigits": {
          "type": "integer",
          "description": "Number of decimal digits, only for numeric columns. Values between 0 and 10 are allowed. If not set, the default value is 3.",
          "format": "int32",
          "example": 2
        }
      },
      "description": "A column object, which is used to create a new column.",
      "example": [
        {
          "kind": "text",
          "identifier": true,
          "description": {
            "en": "simple text"
          },
          "name": "capital city",
          "displayName": {
            "en": "Capital City",
            "de": "Hauptstadt"
          },
          "ordering": "1"
        },
        {
          "kind": "numeric",
          "frontendReadOnly": true,
          "description": {
            "en": "simple number column"
          },
          "name": "population",
          "ordering": "2"
        },
        {
          "kind": "group",
          "name": "capital city with population",
          "description": {
            "en": "a group example, the column ids in groups array must be absolute"
          },
          "ordering": "3",
          "groups": [
            1,
            2
          ],
          "formatPattern": "city {{1}} has {{2}} inhabitants",
          "showMemberColumns": true,
          "decimalDigits": 6
        }
      ]
    },
    "RowPermission": {
      "description": "A row annotation",
      "type": "string",
      "example": "onlyUserGroupA"
    },
    "constraint": {
      "type": "object",
      "description": "The constraint of the column",
      "properties": {
        "cardinality": {
          "$ref": "#/definitions/cardinality"
        },
        "deleteCascade": {
          "type": "boolean",
          "example": true
        },
        "archiveCascade": {
          "type": "boolean",
          "example": true
        },
        "finalCascade": {
          "type": "boolean",
          "example": true
        }
      }
    },
    "cardinality": {
      "type": "object",
      "description": "The cardinality of the column",
      "properties": {
        "from": {
          "type": "integer",
          "format": "int32",
          "example": 0
        },
        "to": {
          "type": "integer",
          "format": "int32",
          "example": 1
        }
      }
    },
    "Property:RowLevelAnnotations": {
      "type": "object",
      "properties": {
        "final": {
          "type": "boolean",
          "example": true
        },
        "archived": {
          "type": "boolean",
          "example": true
        }
      }
    }
  },
  "parameters": {
    "tableId": {
      "name": "tableId",
      "description": "The id of the table to select.",
      "in": "path",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "serviceId": {
      "name": "serviceId",
      "description": "The id of the service to select.",
      "in": "path",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "columnId": {
      "name": "columnId",
      "description": "The id of the column to select.",
      "in": "path",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "rowId": {
      "name": "rowId",
      "description": "The id of the row to select.",
      "in": "path",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "attachmentId": {
      "name": "attachmentId",
      "description": "The UUID of the attachment to select.",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "uuid",
      "example": "edd613d7-4d9b-4282-ada3-927178dfd620"
    },
    "annotationId": {
      "name": "annotationId",
      "description": "The UUID of the annotation to select.",
      "in": "path",
      "required": true,
      "type": "string",
      "format": "uuid",
      "example": "edd613d7-4d9b-4282-ada3-927178dfd620"
    },
    "languageTag": {
      "name": "languageTag",
      "description": "A language tag in RFC 5646 format.",
      "in": "path",
      "required": true,
      "type": "array",
      "items": {
        "$ref": "#/definitions/LanguageTag"
      }
    },
    "languageTagOpt": {
      "name": "languageTag",
      "description": "A language tag in RFC 5646 format.",
      "in": "path",
      "required": false,
      "type": "string",
      "default": "",
      "items": {
        "$ref": "#/definitions/LanguageTag"
      }
    },
    "langtags": {
      "name": "langtags",
      "description": "An array of language tags in RFC 5646 format.",
      "in": "body",
      "schema": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/LanguageTag"
        }
      }
    },
    "linkId": {
      "name": "linkId",
      "description": "The id of the linked entity to select.",
      "in": "path",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "value": {
      "name": "value",
      "description": "The new value of the cell.",
      "in": "body",
      "required": false,
      "schema": {
        "type": "object",
        "properties": {
          "value": {
            "$ref": "#/definitions/CellValue"
          }
        }
      }
    },
    "forceHistoryOpt": {
      "name": "forceHistory",
      "description": "If set to true, a history entry will be created even if the value did not change.",
      "in": "query",
      "required": false,
      "type": "boolean",
      "default": false
    },
    "fileuuid": {
      "name": "fileuuid",
      "in": "path",
      "required": true,
      "type": "string"
    },
    "folderId": {
      "name": "folderId",
      "in": "path",
      "required": true,
      "type": "string"
    },
    "nonce": {
      "name": "nonce",
      "description": "nonce which will be exposed via server log",
      "in": "query",
      "type": "string",
      "format": "uuid",
      "required": false
    },
    "historyType": {
      "name": "historyType",
      "description": "The type of the history to filter for.",
      "in": "query",
      "type": "string",
      "required": false,
      "items": {
        "$ref": "#/definitions/Enum: HistoryType"
      }
    },
    "groupId": {
      "name": "groupId",
      "description": "The id of the group to select.",
      "in": "path",
      "required": true,
      "type": "integer",
      "format": "int64"
    },
    "replacingRowId": {
      "name": "replacingRowId",
      "description": "The id of the row that should replace another row.",
      "in": "query",
      "type": "integer",
      "format": "int64",
      "required": false
    },
    "rowPermissionBody": {
      "name": "value",
      "description": "An array of row permission to add, remove or replace.",
      "in": "body",
      "required": true,
      "schema": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "example": [
          "onlyUserGroupA",
          "onlyUserGroupB"
        ]
      }
    },
    "limit": {
      "name": "limit",
      "description": "The maximum number of rows to return.",
      "in": "query",
      "type": "integer",
      "required": false
    },
    "offset": {
      "name": "offset",
      "description": "The number of rows to skip.",
      "in": "query",
      "type": "integer",
      "required": false
    },
    "final": {
      "name": "final",
      "description": "Filter for final rows.\n- If set to true, only final rows are returned.\n- If set to false, only non-final rows are returned.\n- If not set, all rows are returned. (default)",
      "in": "query",
      "type": "boolean",
      "required": false
    },
    "archived": {
      "name": "archived",
      "description": "Filter for archived rows.\n- If set to true, only archived rows are returned.\n- If set to false, only non-archived rows are returned.\n- If not set, all rows are returned. (default)",
      "in": "query",
      "type": "boolean",
      "required": false
    },
    "annotationName": {
      "name": "annotationName",
      "description": "The name of the annotation",
      "in": "path",
      "required": true,
      "type": "string",
      "example": "postpone"
    }
  },
  "responses": {
    "cell-annotation": {
      "description": "An annotation of a cell.",
      "schema": {
        "$ref": "#/definitions/Response:CellAnnotation"
      }
    },
    "cell-annotations": {
      "description": "A list of annotations",
      "schema": {
        "$ref": "#/definitions/Response:CellAnnotations"
      }
    },
    "cell-value": {
      "description": "The complete cell value.",
      "schema": {
        "$ref": "#/definitions/Response:Cell"
      }
    },
    "row": {
      "description": "A row of a table",
      "schema": {
        "$ref": "#/definitions/Response:Row"
      }
    },
    "dependentRows": {
      "description": "A list of rows that depend on a selected row",
      "schema": {
        "$ref": "#/definitions/Response:DependentRows"
      }
    },
    "foreignRows": {
      "description": "A list of rows that can be linked to the specified row. If the cardinality check set is reached, the array is empty.",
      "schema": {
        "$ref": "#/definitions/Response:ForeignRows"
      }
    },
    "table-with-id": {
      "description": "Metadata of the table.",
      "schema": {
        "$ref": "#/definitions/Response:Table"
      }
    },
    "ok-empty-body": {
      "description": "An empty body.",
      "schema": {
        "$ref": "#/definitions/Response:Status"
      }
    },
    "not-found-in-database": {
      "description": "If the specified entity does not exist in the database, this error is thrown. For example a table, column or row with the specified id could not be found."
    },
    "no-json-found": {
      "description": "Request should have had a JSON body."
    },
    "not-enough-arguments-exception": {
      "description": "Not enough arguments"
    },
    "invalid-json-exception": {
      "description": "Request contains an invalid JSON body."
    },
    "unknown-error": {
      "description": "Various server exception"
    },
    "database-exception": {
      "description": "Server got a PostgreSQL error while running a statement"
    },
    "history-cell": {
      "description": "The complete history of changes.",
      "schema": {
        "$ref": "#/definitions/Response:HistoryRows"
      }
    },
    "tableGroup": {
      "description": "The table group",
      "schema": {
        "$ref": "#/definitions/Response:TableGroup"
      }
    }
  }
}
